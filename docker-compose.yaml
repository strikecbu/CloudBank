version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3.10-management
    mem_limit: 350m
    expose:
      - "5672"
      - "15672"
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - bank-net
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 10

    # https://hub.docker.com/r/openzipkin/zipkin
  zipkin:
    image: openzipkin/zipkin:2.23
    mem_limit: 512m
    expose:
      - "9411"
    ports:
      - "9411:9411"
    networks:
      - bank-net
    environment:
      - RABBIT_ADDRESSES=rabbitmq
      - RABBIT_USER=guest
      - RABBIT_PASSWORD=guest
      - STORAGE_TYPE=mem
    depends_on:
      rabbitmq:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:v2.36.2
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - bank-net

  grafana:
    image: grafana/grafana:9.0.2
    ports:
      - '3000:3000'
    environment:
      #      - GF_INSTALL_PLUGINS=http://plugin-domain.com/my-custom-plugin.zip;custom-plugin,grafana-clock-panel
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    depends_on:
      - prometheus
    networks:
      - bank-net

  configServer:
    image: andychentw/bank-config:latest
    ports:
      - "8010:8010"
    networks:
      - bank-net
    environment:
      - spring.rabbitmq.host=rabbitmq
    env_file:
      - .env
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8010' || exit 1
      interval: 10s
      timeout: 5s
      retries: 10

  eurekaServer:
    image: andychentw/eureka-server
    ports:
      - "8011:8011"
    networks:
      - bank-net
    depends_on:
      configServer:
          condition: service_healthy
      rabbitmq:
          condition: service_healthy
    environment:
      - spring.profiles.active=docker
      - spring.config.import=configserver:http://configServer:8010
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8011' || exit 1
#      test: "curl -fs localhost:8011/actuator/health | grep UP  || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
#  eurekaServer1:
#    image: andychentw/eureka-server
#    ports:
#      - "8012:8011"
#    networks:
#      - bank-net
#    depends_on:
#      - configServer
#    environment:
#      - spring.config.import=configserver:http://configServer:8010
#    deploy:
#      restart_policy:
#        condition: on-failure
#        max_attempts: 3
  gateway:
    image: andychentw/gateway-server:latest
    ports:
      - "8087:8087"
    depends_on:
      configServer:
        condition: service_healthy
      eurekaServer:
        condition: service_healthy
    networks:
      - bank-net
    environment:
      - spring.profiles.active=docker
      - spring.config.import=configserver:http://configServer:8010
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  accounts:
    image: andychentw/accounts:latest
    ports:
      - "8080:8080"
    depends_on:
      configServer:
        condition: service_healthy
      eurekaServer:
        condition: service_healthy
    networks:
      - bank-net
    environment:
      - spring.profiles.active=docker
      - spring.config.import=configserver:http://configServer:8010
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  cards:
    image: andychentw/cards:latest
    ports:
      - 9000:9000
    depends_on:
      configServer:
        condition: service_healthy
      eurekaServer:
        condition: service_healthy
    networks:
      - bank-net
    environment:
      - spring.profiles.active=docker
      - spring.config.import=configserver:http://configServer:8010
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  postgresDB:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: p@ssw0rd
      POSTGRES_DB: postgres
    networks:
      - bank-net

  loans:
    image: andychentw/loans:latest
    ports:
      - 8090:8090
    depends_on:
      configServer:
        condition: service_healthy
      eurekaServer:
        condition: service_healthy
#      - postgresDB
    networks:
      - bank-net
    environment:
      - spring.profiles.active=docker
      - spring.config.import=configserver:http://configServer:8010
      - db.postgres.url=r2dbc:postgresql://postgresDB:5432
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3


networks:
  bank-net:
